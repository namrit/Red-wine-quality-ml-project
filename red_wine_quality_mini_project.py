# -*- coding: utf-8 -*-
"""Red wine quality-mini project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NIedMf0qda-547RDz_SCvzC-W5ilsyr2
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

datas=pd.read_csv('winequality-red.csv')

datas.head()

datas.info()

datas.shape

datas['quality'].unique()

#Counter is an unordered collection where elements are stored as Dict keys and their count as dict value.
from collections import Counter
Counter(datas['quality'])

#number of values for each quality
datas['quality'].value_counts()

sns.catplot(x='quality',data=datas,kind='count',palette="Set2");

datas['total sulfur dioxide'].unique()

datas['total sulfur dioxide'].value_counts()

sns.catplot(x='total sulfur dioxide',data=datas,kind='count',palette="Set3");

#Volatile acidity vs Quality
plot = plt.figure(figsize=(10,6))
sns.barplot(x='quality',y='volatile acidity',data=datas,palette='Set1');

#citric acid vs quality
plot = plt.figure(figsize=(6,6))
sns.barplot(x='quality',y='citric acid',data=datas,palette='Set3');

#Plot a boxplot to check for Outliers
#Target variable is Quality. So will plot a boxplot each column against target variable
sns.boxplot(x=datas['quality'], y=datas['fixed acidity'],palette='Set1')

"""#Correlations"""

correlation = datas.corr()

# constructing a heatmap to understand the correlation between the columns
plt.figure(figsize=(10,10))
sns.heatmap(correlation, cbar = True, square=True, fmt = ".1f", annot = True,
           annot_kws = {"size":8}, cmap = "Blues");

sns.pairplot(datas, hue='quality')

"""#Label Binearization"""

#Initializing the empty list lines reviews.
reviews = []
#This list will store the quality ratings for each wine sample based on their original quality scores.
for i in datas['quality']:
#This line starts a for loop that iterates over each value in the "quality" column of the data DataFrame.
#The loop assigns each value to the variable i.
#there are three if-elif statements that check the value of i and append a corresponding string to the reviews list
  if i>=1 and i<=3:
    reviews.append('1')
 #If the quality score i is between 1 and 3 (inclusive), the string "1" is appended to the reviews list.
  elif i>=4 and i<=7:
    reviews.append('2')
  elif i>=8 and i<=10:
    reviews.append('3')
datas["Reviews"] = reviews
#After the loop completes, this line creates a new column named "Reviews" in the data DataFrame and assigns the reviews list as its values.
#This means that each wine sample will have a corresponding quality rating of "1", "2", or "3" based on its original quality score.

datas.columns

datas.head()

datas['Reviews'].value_counts()

datas['Reviews'].unique()

X = datas.iloc[:,:11]
y = datas["Reviews"]

X.head()

y.head()

datas.head()

sc= StandardScaler()
X=sc.fit_transform(x)

X

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""#Logistic Regression"""

lr=LogisticRegression()
lr.fit(X_train,y_train)
lr_predict=lr.predict(X_test)

lr_conf_matrix=confusion_matrix(y_test, lr_predict)
print(lr_conf_matrix)
lr_acc_score=accuracy_score(y_test, lr_predict)
print(lr_acc_score)
print(classification_report(y_test, lr_predict))

"""#Random Forest Classifier"""

model=RandomForestClassifier()
model.fit(X_train,y_train)
y_pred=model.predict(X_test)

acc_score=accuracy_score(y_test, y_pred)
print(acc_score)

